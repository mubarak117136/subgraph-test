// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CollectionCreated extends ethereum.Event {
  get params(): CollectionCreated__Params {
    return new CollectionCreated__Params(this);
  }
}

export class CollectionCreated__Params {
  _event: CollectionCreated;

  constructor(event: CollectionCreated) {
    this._event = event;
  }

  get collectionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get URL(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MarketItemCreated extends ethereum.Event {
  get params(): MarketItemCreated__Params {
    return new MarketItemCreated__Params(this);
  }
}

export class MarketItemCreated__Params {
  _event: MarketItemCreated;

  constructor(event: MarketItemCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sold(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get numberOfToken(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get nftType(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get customContract(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get customTokenId(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get URL(): string {
    return this._event.parameters[10].value.toString();
  }
}

export class NFTListed extends ethereum.Event {
  get params(): NFTListed__Params {
    return new NFTListed__Params(this);
  }
}

export class NFTListed__Params {
  _event: NFTListed;

  constructor(event: NFTListed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NFTPurchase extends ethereum.Event {
  get params(): NFTPurchase__Params {
    return new NFTPurchase__Params(this);
  }
}

export class NFTPurchase__Params {
  _event: NFTPurchase;

  constructor(event: NFTPurchase) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Token__fetchAllMarketNFTsResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get creator(): Address {
    return this[3].toAddress();
  }

  get price(): BigInt {
    return this[4].toBigInt();
  }

  get sold(): boolean {
    return this[5].toBoolean();
  }

  get numberOfToken(): BigInt {
    return this[6].toBigInt();
  }

  get nftType(): i32 {
    return this[7].toI32();
  }

  get bidding(): Token__fetchAllMarketNFTsResultValue0BiddingStruct {
    return changetype<Token__fetchAllMarketNFTsResultValue0BiddingStruct>(
      this[8].toTuple(),
    );
  }

  get offer(): Token__fetchAllMarketNFTsResultValue0OfferStruct {
    return changetype<Token__fetchAllMarketNFTsResultValue0OfferStruct>(
      this[9].toTuple(),
    );
  }

  get customContract(): Address {
    return this[10].toAddress();
  }

  get customTokenId(): BigInt {
    return this[11].toBigInt();
  }
}

export class Token__fetchAllMarketNFTsResultValue0BiddingStruct extends ethereum.Tuple {
  get isBiddingEnable(): boolean {
    return this[0].toBoolean();
  }

  get currentBid(): BigInt {
    return this[1].toBigInt();
  }

  get currentBidder(): Address {
    return this[2].toAddress();
  }

  get biddingEndTime(): BigInt {
    return this[3].toBigInt();
  }
}

export class Token__fetchAllMarketNFTsResultValue0OfferStruct extends ethereum.Tuple {
  get isOfferEnabled(): boolean {
    return this[0].toBoolean();
  }

  get highestOffer(): BigInt {
    return this[1].toBigInt();
  }

  get highestOfferer(): Address {
    return this[2].toAddress();
  }
}

export class Token__fetchMarketNFTsResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get creator(): Address {
    return this[3].toAddress();
  }

  get price(): BigInt {
    return this[4].toBigInt();
  }

  get sold(): boolean {
    return this[5].toBoolean();
  }

  get numberOfToken(): BigInt {
    return this[6].toBigInt();
  }

  get nftType(): i32 {
    return this[7].toI32();
  }

  get bidding(): Token__fetchMarketNFTsResultValue0BiddingStruct {
    return changetype<Token__fetchMarketNFTsResultValue0BiddingStruct>(
      this[8].toTuple(),
    );
  }

  get offer(): Token__fetchMarketNFTsResultValue0OfferStruct {
    return changetype<Token__fetchMarketNFTsResultValue0OfferStruct>(
      this[9].toTuple(),
    );
  }

  get customContract(): Address {
    return this[10].toAddress();
  }

  get customTokenId(): BigInt {
    return this[11].toBigInt();
  }
}

export class Token__fetchMarketNFTsResultValue0BiddingStruct extends ethereum.Tuple {
  get isBiddingEnable(): boolean {
    return this[0].toBoolean();
  }

  get currentBid(): BigInt {
    return this[1].toBigInt();
  }

  get currentBidder(): Address {
    return this[2].toAddress();
  }

  get biddingEndTime(): BigInt {
    return this[3].toBigInt();
  }
}

export class Token__fetchMarketNFTsResultValue0OfferStruct extends ethereum.Tuple {
  get isOfferEnabled(): boolean {
    return this[0].toBoolean();
  }

  get highestOffer(): BigInt {
    return this[1].toBigInt();
  }

  get highestOfferer(): Address {
    return this[2].toAddress();
  }
}

export class Token__fetchMyNFTsResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get creator(): Address {
    return this[3].toAddress();
  }

  get price(): BigInt {
    return this[4].toBigInt();
  }

  get sold(): boolean {
    return this[5].toBoolean();
  }

  get numberOfToken(): BigInt {
    return this[6].toBigInt();
  }

  get nftType(): i32 {
    return this[7].toI32();
  }

  get bidding(): Token__fetchMyNFTsResultValue0BiddingStruct {
    return changetype<Token__fetchMyNFTsResultValue0BiddingStruct>(
      this[8].toTuple(),
    );
  }

  get offer(): Token__fetchMyNFTsResultValue0OfferStruct {
    return changetype<Token__fetchMyNFTsResultValue0OfferStruct>(
      this[9].toTuple(),
    );
  }

  get customContract(): Address {
    return this[10].toAddress();
  }

  get customTokenId(): BigInt {
    return this[11].toBigInt();
  }
}

export class Token__fetchMyNFTsResultValue0BiddingStruct extends ethereum.Tuple {
  get isBiddingEnable(): boolean {
    return this[0].toBoolean();
  }

  get currentBid(): BigInt {
    return this[1].toBigInt();
  }

  get currentBidder(): Address {
    return this[2].toAddress();
  }

  get biddingEndTime(): BigInt {
    return this[3].toBigInt();
  }
}

export class Token__fetchMyNFTsResultValue0OfferStruct extends ethereum.Tuple {
  get isOfferEnabled(): boolean {
    return this[0].toBoolean();
  }

  get highestOffer(): BigInt {
    return this[1].toBigInt();
  }

  get highestOfferer(): Address {
    return this[2].toAddress();
  }
}

export class Token__getCollectionIdToCollectionResultValue0Struct extends ethereum.Tuple {
  get collectionId(): BigInt {
    return this[0].toBigInt();
  }

  get URL(): string {
    return this[1].toString();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class Token__getMarketplaceFeeResultValue0Struct extends ethereum.Tuple {
  get Marketplace(): BigInt {
    return this[0].toBigInt();
  }

  get Bronze(): BigInt {
    return this[1].toBigInt();
  }

  get Silver(): BigInt {
    return this[2].toBigInt();
  }

  get Gold(): BigInt {
    return this[3].toBigInt();
  }

  get Platinum(): BigInt {
    return this[4].toBigInt();
  }

  get Rhodium(): BigInt {
    return this[5].toBigInt();
  }
}

export class Token__getStakeAmountTierResultValue0Struct extends ethereum.Tuple {
  get Bronze(): BigInt {
    return this[0].toBigInt();
  }

  get Silver(): BigInt {
    return this[1].toBigInt();
  }

  get Gold(): BigInt {
    return this[2].toBigInt();
  }

  get Platinum(): BigInt {
    return this[3].toBigInt();
  }

  get Rhodium(): BigInt {
    return this[4].toBigInt();
  }
}

export class Token__getTokenIdToMarketItemResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get owner(): Address {
    return this[2].toAddress();
  }

  get creator(): Address {
    return this[3].toAddress();
  }

  get price(): BigInt {
    return this[4].toBigInt();
  }

  get sold(): boolean {
    return this[5].toBoolean();
  }

  get numberOfToken(): BigInt {
    return this[6].toBigInt();
  }

  get nftType(): i32 {
    return this[7].toI32();
  }

  get bidding(): Token__getTokenIdToMarketItemResultValue0BiddingStruct {
    return changetype<Token__getTokenIdToMarketItemResultValue0BiddingStruct>(
      this[8].toTuple(),
    );
  }

  get offer(): Token__getTokenIdToMarketItemResultValue0OfferStruct {
    return changetype<Token__getTokenIdToMarketItemResultValue0OfferStruct>(
      this[9].toTuple(),
    );
  }

  get customContract(): Address {
    return this[10].toAddress();
  }

  get customTokenId(): BigInt {
    return this[11].toBigInt();
  }
}

export class Token__getTokenIdToMarketItemResultValue0BiddingStruct extends ethereum.Tuple {
  get isBiddingEnable(): boolean {
    return this[0].toBoolean();
  }

  get currentBid(): BigInt {
    return this[1].toBigInt();
  }

  get currentBidder(): Address {
    return this[2].toAddress();
  }

  get biddingEndTime(): BigInt {
    return this[3].toBigInt();
  }
}

export class Token__getTokenIdToMarketItemResultValue0OfferStruct extends ethereum.Tuple {
  get isOfferEnabled(): boolean {
    return this[0].toBoolean();
  }

  get highestOffer(): BigInt {
    return this[1].toBigInt();
  }

  get highestOfferer(): Address {
    return this[2].toAddress();
  }
}

export class Token extends ethereum.SmartContract {
  static bind(address: Address): Token {
    return new Token("Token", address);
  }

  buyNFT(_tokenId: BigInt): boolean {
    let result = super.call("buyNFT", "buyNFT(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);

    return result[0].toBoolean();
  }

  try_buyNFT(_tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("buyNFT", "buyNFT(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fetchAllMarketNFTs(
    _from: BigInt,
    _to: BigInt,
  ): Array<Token__fetchAllMarketNFTsResultValue0Struct> {
    let result = super.call(
      "fetchAllMarketNFTs",
      "fetchAllMarketNFTs(uint256,uint256):((uint256,address,address,address,uint256,bool,uint256,uint8,(bool,uint256,address,uint256),(bool,uint256,address),address,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_from),
        ethereum.Value.fromUnsignedBigInt(_to),
      ],
    );

    return result[0].toTupleArray<Token__fetchAllMarketNFTsResultValue0Struct>();
  }

  try_fetchAllMarketNFTs(
    _from: BigInt,
    _to: BigInt,
  ): ethereum.CallResult<Array<Token__fetchAllMarketNFTsResultValue0Struct>> {
    let result = super.tryCall(
      "fetchAllMarketNFTs",
      "fetchAllMarketNFTs(uint256,uint256):((uint256,address,address,address,uint256,bool,uint256,uint8,(bool,uint256,address,uint256),(bool,uint256,address),address,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_from),
        ethereum.Value.fromUnsignedBigInt(_to),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Token__fetchAllMarketNFTsResultValue0Struct>(),
    );
  }

  fetchMarketNFTs(): Array<Token__fetchMarketNFTsResultValue0Struct> {
    let result = super.call(
      "fetchMarketNFTs",
      "fetchMarketNFTs():((uint256,address,address,address,uint256,bool,uint256,uint8,(bool,uint256,address,uint256),(bool,uint256,address),address,uint256)[])",
      [],
    );

    return result[0].toTupleArray<Token__fetchMarketNFTsResultValue0Struct>();
  }

  try_fetchMarketNFTs(): ethereum.CallResult<
    Array<Token__fetchMarketNFTsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchMarketNFTs",
      "fetchMarketNFTs():((uint256,address,address,address,uint256,bool,uint256,uint8,(bool,uint256,address,uint256),(bool,uint256,address),address,uint256)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Token__fetchMarketNFTsResultValue0Struct>(),
    );
  }

  fetchMyNFTs(
    _user: Address,
    isListed: boolean,
  ): Array<Token__fetchMyNFTsResultValue0Struct> {
    let result = super.call(
      "fetchMyNFTs",
      "fetchMyNFTs(address,bool):((uint256,address,address,address,uint256,bool,uint256,uint8,(bool,uint256,address,uint256),(bool,uint256,address),address,uint256)[])",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromBoolean(isListed)],
    );

    return result[0].toTupleArray<Token__fetchMyNFTsResultValue0Struct>();
  }

  try_fetchMyNFTs(
    _user: Address,
    isListed: boolean,
  ): ethereum.CallResult<Array<Token__fetchMyNFTsResultValue0Struct>> {
    let result = super.tryCall(
      "fetchMyNFTs",
      "fetchMyNFTs(address,bool):((uint256,address,address,address,uint256,bool,uint256,uint8,(bool,uint256,address,uint256),(bool,uint256,address),address,uint256)[])",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromBoolean(isListed)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Token__fetchMyNFTsResultValue0Struct>(),
    );
  }

  getCollectionId(): BigInt {
    let result = super.call(
      "getCollectionId",
      "getCollectionId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getCollectionId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollectionId",
      "getCollectionId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollectionIdToCollection(
    _id: BigInt,
  ): Token__getCollectionIdToCollectionResultValue0Struct {
    let result = super.call(
      "getCollectionIdToCollection",
      "getCollectionIdToCollection(uint256):((uint256,string,address,uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(_id)],
    );

    return changetype<Token__getCollectionIdToCollectionResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getCollectionIdToCollection(
    _id: BigInt,
  ): ethereum.CallResult<Token__getCollectionIdToCollectionResultValue0Struct> {
    let result = super.tryCall(
      "getCollectionIdToCollection",
      "getCollectionIdToCollection(uint256):((uint256,string,address,uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(_id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Token__getCollectionIdToCollectionResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getIndexOfCollectionNFT(_tokenId: BigInt): BigInt {
    let result = super.call(
      "getIndexOfCollectionNFT",
      "getIndexOfCollectionNFT(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );

    return result[0].toBigInt();
  }

  try_getIndexOfCollectionNFT(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIndexOfCollectionNFT",
      "getIndexOfCollectionNFT(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketplaceFee(): Token__getMarketplaceFeeResultValue0Struct {
    let result = super.call(
      "getMarketplaceFee",
      "getMarketplaceFee():((uint256,uint256,uint256,uint256,uint256,uint256))",
      [],
    );

    return changetype<Token__getMarketplaceFeeResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getMarketplaceFee(): ethereum.CallResult<Token__getMarketplaceFeeResultValue0Struct> {
    let result = super.tryCall(
      "getMarketplaceFee",
      "getMarketplaceFee():((uint256,uint256,uint256,uint256,uint256,uint256))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Token__getMarketplaceFeeResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getStakeAmountTier(): Token__getStakeAmountTierResultValue0Struct {
    let result = super.call(
      "getStakeAmountTier",
      "getStakeAmountTier():((uint256,uint256,uint256,uint256,uint256))",
      [],
    );

    return changetype<Token__getStakeAmountTierResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getStakeAmountTier(): ethereum.CallResult<Token__getStakeAmountTierResultValue0Struct> {
    let result = super.tryCall(
      "getStakeAmountTier",
      "getStakeAmountTier():((uint256,uint256,uint256,uint256,uint256))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Token__getStakeAmountTierResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getTokenContract(_type: i32): Address {
    let result = super.call(
      "getTokenContract",
      "getTokenContract(uint8):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_type))],
    );

    return result[0].toAddress();
  }

  try_getTokenContract(_type: i32): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenContract",
      "getTokenContract(uint8):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_type))],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenId(): BigInt {
    let result = super.call("getTokenId", "getTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTokenId", "getTokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenIdToMarketItem(
    _tokenId: BigInt,
  ): Token__getTokenIdToMarketItemResultValue0Struct {
    let result = super.call(
      "getTokenIdToMarketItem",
      "getTokenIdToMarketItem(uint256):((uint256,address,address,address,uint256,bool,uint256,uint8,(bool,uint256,address,uint256),(bool,uint256,address),address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );

    return changetype<Token__getTokenIdToMarketItemResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getTokenIdToMarketItem(
    _tokenId: BigInt,
  ): ethereum.CallResult<Token__getTokenIdToMarketItemResultValue0Struct> {
    let result = super.tryCall(
      "getTokenIdToMarketItem",
      "getTokenIdToMarketItem(uint256):((uint256,address,address,address,uint256,bool,uint256,uint8,(bool,uint256,address,uint256),(bool,uint256,address),address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Token__getTokenIdToMarketItemResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getTokenSold(): BigInt {
    let result = super.call("getTokenSold", "getTokenSold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTokenSold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTokenSold", "getTokenSold():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenURI(_tokenType: i32, _tokenId: BigInt): string {
    let result = super.call(
      "getTokenURI",
      "getTokenURI(uint8,uint256):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tokenType)),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );

    return result[0].toString();
  }

  try_getTokenURI(
    _tokenType: i32,
    _tokenId: BigInt,
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getTokenURI",
      "getTokenURI(uint8,uint256):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tokenType)),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTotalCost(_tokenIds: Array<BigInt>): BigInt {
    let result = super.call(
      "getTotalCost",
      "getTotalCost(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(_tokenIds)],
    );

    return result[0].toBigInt();
  }

  try_getTotalCost(_tokenIds: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalCost",
      "getTotalCost(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(_tokenIds)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserCollectionIds(_user: Address): Array<BigInt> {
    let result = super.call(
      "getUserCollectionIds",
      "getUserCollectionIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigIntArray();
  }

  try_getUserCollectionIds(_user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserCollectionIds",
      "getUserCollectionIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _erc1155(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _pToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _staking(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOfferCall extends ethereum.Call {
  get inputs(): AcceptOfferCall__Inputs {
    return new AcceptOfferCall__Inputs(this);
  }

  get outputs(): AcceptOfferCall__Outputs {
    return new AcceptOfferCall__Outputs(this);
  }
}

export class AcceptOfferCall__Inputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class AcceptOfferCall__Outputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }
}

export class BulkBuyNFTsCall extends ethereum.Call {
  get inputs(): BulkBuyNFTsCall__Inputs {
    return new BulkBuyNFTsCall__Inputs(this);
  }

  get outputs(): BulkBuyNFTsCall__Outputs {
    return new BulkBuyNFTsCall__Outputs(this);
  }
}

export class BulkBuyNFTsCall__Inputs {
  _call: BulkBuyNFTsCall;

  constructor(call: BulkBuyNFTsCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class BulkBuyNFTsCall__Outputs {
  _call: BulkBuyNFTsCall;

  constructor(call: BulkBuyNFTsCall) {
    this._call = call;
  }
}

export class BulkListNFTsCall extends ethereum.Call {
  get inputs(): BulkListNFTsCall__Inputs {
    return new BulkListNFTsCall__Inputs(this);
  }

  get outputs(): BulkListNFTsCall__Outputs {
    return new BulkListNFTsCall__Outputs(this);
  }
}

export class BulkListNFTsCall__Inputs {
  _call: BulkListNFTsCall;

  constructor(call: BulkListNFTsCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _prices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _numberOfTokens(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BulkListNFTsCall__Outputs {
  _call: BulkListNFTsCall;

  constructor(call: BulkListNFTsCall) {
    this._call = call;
  }
}

export class BulkMintNFTsCall extends ethereum.Call {
  get inputs(): BulkMintNFTsCall__Inputs {
    return new BulkMintNFTsCall__Inputs(this);
  }

  get outputs(): BulkMintNFTsCall__Outputs {
    return new BulkMintNFTsCall__Outputs(this);
  }
}

export class BulkMintNFTsCall__Inputs {
  _call: BulkMintNFTsCall;

  constructor(call: BulkMintNFTsCall) {
    this._call = call;
  }

  get _numberOfToken(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _tokenURI(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get _type(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get _nftPrice(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get shouldList(): Array<boolean> {
    return this._call.inputValues[4].value.toBooleanArray();
  }

  get _royaltyFee(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class BulkMintNFTsCall__Outputs {
  _call: BulkMintNFTsCall;

  constructor(call: BulkMintNFTsCall) {
    this._call = call;
  }
}

export class BurnNFTCall extends ethereum.Call {
  get inputs(): BurnNFTCall__Inputs {
    return new BurnNFTCall__Inputs(this);
  }

  get outputs(): BurnNFTCall__Outputs {
    return new BurnNFTCall__Outputs(this);
  }
}

export class BurnNFTCall__Inputs {
  _call: BurnNFTCall;

  constructor(call: BurnNFTCall) {
    this._call = call;
  }

  get _tokenId(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _numberOfToken(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BurnNFTCall__Outputs {
  _call: BurnNFTCall;

  constructor(call: BurnNFTCall) {
    this._call = call;
  }
}

export class BuyNFTCall extends ethereum.Call {
  get inputs(): BuyNFTCall__Inputs {
    return new BuyNFTCall__Inputs(this);
  }

  get outputs(): BuyNFTCall__Outputs {
    return new BuyNFTCall__Outputs(this);
  }
}

export class BuyNFTCall__Inputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyNFTCall__Outputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelListingCall extends ethereum.Call {
  get inputs(): CancelListingCall__Inputs {
    return new CancelListingCall__Inputs(this);
  }

  get outputs(): CancelListingCall__Outputs {
    return new CancelListingCall__Outputs(this);
  }
}

export class CancelListingCall__Inputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class CancelListingCall__Outputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }
}

export class CreateCollectionCall extends ethereum.Call {
  get inputs(): CreateCollectionCall__Inputs {
    return new CreateCollectionCall__Inputs(this);
  }

  get outputs(): CreateCollectionCall__Outputs {
    return new CreateCollectionCall__Outputs(this);
  }
}

export class CreateCollectionCall__Inputs {
  _call: CreateCollectionCall;

  constructor(call: CreateCollectionCall) {
    this._call = call;
  }

  get _url(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateCollectionCall__Outputs {
  _call: CreateCollectionCall;

  constructor(call: CreateCollectionCall) {
    this._call = call;
  }
}

export class EnableBiddingCall extends ethereum.Call {
  get inputs(): EnableBiddingCall__Inputs {
    return new EnableBiddingCall__Inputs(this);
  }

  get outputs(): EnableBiddingCall__Outputs {
    return new EnableBiddingCall__Outputs(this);
  }
}

export class EnableBiddingCall__Inputs {
  _call: EnableBiddingCall;

  constructor(call: EnableBiddingCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get endTimes(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _statuses(): Array<boolean> {
    return this._call.inputValues[2].value.toBooleanArray();
  }
}

export class EnableBiddingCall__Outputs {
  _call: EnableBiddingCall;

  constructor(call: EnableBiddingCall) {
    this._call = call;
  }
}

export class EnableOfferCall extends ethereum.Call {
  get inputs(): EnableOfferCall__Inputs {
    return new EnableOfferCall__Inputs(this);
  }

  get outputs(): EnableOfferCall__Outputs {
    return new EnableOfferCall__Outputs(this);
  }
}

export class EnableOfferCall__Inputs {
  _call: EnableOfferCall;

  constructor(call: EnableOfferCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _statuses(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }
}

export class EnableOfferCall__Outputs {
  _call: EnableOfferCall;

  constructor(call: EnableOfferCall) {
    this._call = call;
  }
}

export class EndBidCall extends ethereum.Call {
  get inputs(): EndBidCall__Inputs {
    return new EndBidCall__Inputs(this);
  }

  get outputs(): EndBidCall__Outputs {
    return new EndBidCall__Outputs(this);
  }
}

export class EndBidCall__Inputs {
  _call: EndBidCall;

  constructor(call: EndBidCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class EndBidCall__Outputs {
  _call: EndBidCall;

  constructor(call: EndBidCall) {
    this._call = call;
  }
}

export class ListNFTFromCustomContractCall extends ethereum.Call {
  get inputs(): ListNFTFromCustomContractCall__Inputs {
    return new ListNFTFromCustomContractCall__Inputs(this);
  }

  get outputs(): ListNFTFromCustomContractCall__Outputs {
    return new ListNFTFromCustomContractCall__Outputs(this);
  }
}

export class ListNFTFromCustomContractCall__Inputs {
  _call: ListNFTFromCustomContractCall;

  constructor(call: ListNFTFromCustomContractCall) {
    this._call = call;
  }

  get _customContracts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _numberOfTokens(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _types(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }

  get _nftPrices(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class ListNFTFromCustomContractCall__Outputs {
  _call: ListNFTFromCustomContractCall;

  constructor(call: ListNFTFromCustomContractCall) {
    this._call = call;
  }
}

export class ListNFTToMarketCall extends ethereum.Call {
  get inputs(): ListNFTToMarketCall__Inputs {
    return new ListNFTToMarketCall__Inputs(this);
  }

  get outputs(): ListNFTToMarketCall__Outputs {
    return new ListNFTToMarketCall__Outputs(this);
  }
}

export class ListNFTToMarketCall__Inputs {
  _call: ListNFTToMarketCall;

  constructor(call: ListNFTToMarketCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _numberOfToken(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListNFTToMarketCall__Outputs {
  _call: ListNFTToMarketCall;

  constructor(call: ListNFTToMarketCall) {
    this._call = call;
  }
}

export class MakeOfferCall extends ethereum.Call {
  get inputs(): MakeOfferCall__Inputs {
    return new MakeOfferCall__Inputs(this);
  }

  get outputs(): MakeOfferCall__Outputs {
    return new MakeOfferCall__Outputs(this);
  }
}

export class MakeOfferCall__Inputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _offerAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MakeOfferCall__Outputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }
}

export class MintNFTCall extends ethereum.Call {
  get inputs(): MintNFTCall__Inputs {
    return new MintNFTCall__Inputs(this);
  }

  get outputs(): MintNFTCall__Outputs {
    return new MintNFTCall__Outputs(this);
  }
}

export class MintNFTCall__Inputs {
  _call: MintNFTCall;

  constructor(call: MintNFTCall) {
    this._call = call;
  }

  get _numberOfToken(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _type(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _nftPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get shouldList(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _royaltyFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class MintNFTCall__Outputs {
  _call: MintNFTCall;

  constructor(call: MintNFTCall) {
    this._call = call;
  }
}

export class MintNFTInCollectionCall extends ethereum.Call {
  get inputs(): MintNFTInCollectionCall__Inputs {
    return new MintNFTInCollectionCall__Inputs(this);
  }

  get outputs(): MintNFTInCollectionCall__Outputs {
    return new MintNFTInCollectionCall__Outputs(this);
  }
}

export class MintNFTInCollectionCall__Inputs {
  _call: MintNFTInCollectionCall;

  constructor(call: MintNFTInCollectionCall) {
    this._call = call;
  }

  get _collectionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nftCount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokenURI(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get _nftPrice(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get shouldList(): Array<boolean> {
    return this._call.inputValues[4].value.toBooleanArray();
  }

  get _royaltyFee(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class MintNFTInCollectionCall__Outputs {
  _call: MintNFTInCollectionCall;

  constructor(call: MintNFTInCollectionCall) {
    this._call = call;
  }
}

export class PlaceBidCall extends ethereum.Call {
  get inputs(): PlaceBidCall__Inputs {
    return new PlaceBidCall__Inputs(this);
  }

  get outputs(): PlaceBidCall__Outputs {
    return new PlaceBidCall__Outputs(this);
  }
}

export class PlaceBidCall__Inputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _bidAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class PlaceBidCall__Outputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }
}

export class ReSellNFTCall extends ethereum.Call {
  get inputs(): ReSellNFTCall__Inputs {
    return new ReSellNFTCall__Inputs(this);
  }

  get outputs(): ReSellNFTCall__Outputs {
    return new ReSellNFTCall__Outputs(this);
  }
}

export class ReSellNFTCall__Inputs {
  _call: ReSellNFTCall;

  constructor(call: ReSellNFTCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _prices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ReSellNFTCall__Outputs {
  _call: ReSellNFTCall;

  constructor(call: ReSellNFTCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateDistributionFeeCall extends ethereum.Call {
  get inputs(): UpdateDistributionFeeCall__Inputs {
    return new UpdateDistributionFeeCall__Inputs(this);
  }

  get outputs(): UpdateDistributionFeeCall__Outputs {
    return new UpdateDistributionFeeCall__Outputs(this);
  }
}

export class UpdateDistributionFeeCall__Inputs {
  _call: UpdateDistributionFeeCall;

  constructor(call: UpdateDistributionFeeCall) {
    this._call = call;
  }
}

export class UpdateDistributionFeeCall__Outputs {
  _call: UpdateDistributionFeeCall;

  constructor(call: UpdateDistributionFeeCall) {
    this._call = call;
  }
}

export class UpdateERC1155TokenCall extends ethereum.Call {
  get inputs(): UpdateERC1155TokenCall__Inputs {
    return new UpdateERC1155TokenCall__Inputs(this);
  }

  get outputs(): UpdateERC1155TokenCall__Outputs {
    return new UpdateERC1155TokenCall__Outputs(this);
  }
}

export class UpdateERC1155TokenCall__Inputs {
  _call: UpdateERC1155TokenCall;

  constructor(call: UpdateERC1155TokenCall) {
    this._call = call;
  }

  get _erc1155(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateERC1155TokenCall__Outputs {
  _call: UpdateERC1155TokenCall;

  constructor(call: UpdateERC1155TokenCall) {
    this._call = call;
  }
}

export class UpdateERC721TokenCall extends ethereum.Call {
  get inputs(): UpdateERC721TokenCall__Inputs {
    return new UpdateERC721TokenCall__Inputs(this);
  }

  get outputs(): UpdateERC721TokenCall__Outputs {
    return new UpdateERC721TokenCall__Outputs(this);
  }
}

export class UpdateERC721TokenCall__Inputs {
  _call: UpdateERC721TokenCall;

  constructor(call: UpdateERC721TokenCall) {
    this._call = call;
  }

  get _erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateERC721TokenCall__Outputs {
  _call: UpdateERC721TokenCall;

  constructor(call: UpdateERC721TokenCall) {
    this._call = call;
  }
}

export class UpdateListingFeeCall extends ethereum.Call {
  get inputs(): UpdateListingFeeCall__Inputs {
    return new UpdateListingFeeCall__Inputs(this);
  }

  get outputs(): UpdateListingFeeCall__Outputs {
    return new UpdateListingFeeCall__Outputs(this);
  }
}

export class UpdateListingFeeCall__Inputs {
  _call: UpdateListingFeeCall;

  constructor(call: UpdateListingFeeCall) {
    this._call = call;
  }

  get _newFee(): UpdateListingFeeCall_newFeeStruct {
    return changetype<UpdateListingFeeCall_newFeeStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class UpdateListingFeeCall__Outputs {
  _call: UpdateListingFeeCall;

  constructor(call: UpdateListingFeeCall) {
    this._call = call;
  }
}

export class UpdateListingFeeCall_newFeeStruct extends ethereum.Tuple {
  get Marketplace(): BigInt {
    return this[0].toBigInt();
  }

  get Bronze(): BigInt {
    return this[1].toBigInt();
  }

  get Silver(): BigInt {
    return this[2].toBigInt();
  }

  get Gold(): BigInt {
    return this[3].toBigInt();
  }

  get Platinum(): BigInt {
    return this[4].toBigInt();
  }

  get Rhodium(): BigInt {
    return this[5].toBigInt();
  }
}

export class UpdateListingPriceCall extends ethereum.Call {
  get inputs(): UpdateListingPriceCall__Inputs {
    return new UpdateListingPriceCall__Inputs(this);
  }

  get outputs(): UpdateListingPriceCall__Outputs {
    return new UpdateListingPriceCall__Outputs(this);
  }
}

export class UpdateListingPriceCall__Inputs {
  _call: UpdateListingPriceCall;

  constructor(call: UpdateListingPriceCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _newPrices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UpdateListingPriceCall__Outputs {
  _call: UpdateListingPriceCall;

  constructor(call: UpdateListingPriceCall) {
    this._call = call;
  }
}

export class UpdatePaymentTokenCall extends ethereum.Call {
  get inputs(): UpdatePaymentTokenCall__Inputs {
    return new UpdatePaymentTokenCall__Inputs(this);
  }

  get outputs(): UpdatePaymentTokenCall__Outputs {
    return new UpdatePaymentTokenCall__Outputs(this);
  }
}

export class UpdatePaymentTokenCall__Inputs {
  _call: UpdatePaymentTokenCall;

  constructor(call: UpdatePaymentTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePaymentTokenCall__Outputs {
  _call: UpdatePaymentTokenCall;

  constructor(call: UpdatePaymentTokenCall) {
    this._call = call;
  }
}

export class UpdateStakeAmountTierCall extends ethereum.Call {
  get inputs(): UpdateStakeAmountTierCall__Inputs {
    return new UpdateStakeAmountTierCall__Inputs(this);
  }

  get outputs(): UpdateStakeAmountTierCall__Outputs {
    return new UpdateStakeAmountTierCall__Outputs(this);
  }
}

export class UpdateStakeAmountTierCall__Inputs {
  _call: UpdateStakeAmountTierCall;

  constructor(call: UpdateStakeAmountTierCall) {
    this._call = call;
  }

  get _tier(): UpdateStakeAmountTierCall_tierStruct {
    return changetype<UpdateStakeAmountTierCall_tierStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class UpdateStakeAmountTierCall__Outputs {
  _call: UpdateStakeAmountTierCall;

  constructor(call: UpdateStakeAmountTierCall) {
    this._call = call;
  }
}

export class UpdateStakeAmountTierCall_tierStruct extends ethereum.Tuple {
  get Bronze(): BigInt {
    return this[0].toBigInt();
  }

  get Silver(): BigInt {
    return this[1].toBigInt();
  }

  get Gold(): BigInt {
    return this[2].toBigInt();
  }

  get Platinum(): BigInt {
    return this[3].toBigInt();
  }

  get Rhodium(): BigInt {
    return this[4].toBigInt();
  }
}

export class UpdateVemateStakingCall extends ethereum.Call {
  get inputs(): UpdateVemateStakingCall__Inputs {
    return new UpdateVemateStakingCall__Inputs(this);
  }

  get outputs(): UpdateVemateStakingCall__Outputs {
    return new UpdateVemateStakingCall__Outputs(this);
  }
}

export class UpdateVemateStakingCall__Inputs {
  _call: UpdateVemateStakingCall;

  constructor(call: UpdateVemateStakingCall) {
    this._call = call;
  }

  get _stake(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateVemateStakingCall__Outputs {
  _call: UpdateVemateStakingCall;

  constructor(call: UpdateVemateStakingCall) {
    this._call = call;
  }
}

export class WithdrawMarketAssetCall extends ethereum.Call {
  get inputs(): WithdrawMarketAssetCall__Inputs {
    return new WithdrawMarketAssetCall__Inputs(this);
  }

  get outputs(): WithdrawMarketAssetCall__Outputs {
    return new WithdrawMarketAssetCall__Outputs(this);
  }
}

export class WithdrawMarketAssetCall__Inputs {
  _call: WithdrawMarketAssetCall;

  constructor(call: WithdrawMarketAssetCall) {
    this._call = call;
  }

  get _ERC20token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawMarketAssetCall__Outputs {
  _call: WithdrawMarketAssetCall;

  constructor(call: WithdrawMarketAssetCall) {
    this._call = call;
  }
}
